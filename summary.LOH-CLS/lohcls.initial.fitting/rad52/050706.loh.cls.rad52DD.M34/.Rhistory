 cols  =c("blue","black","red");
 labels=c("viability","Pr(b)","half/full")
 ltypes=c(2,2,2) 
 pch   =c( 16, 15,16)
 legend( 5 , 10 ,labels, col=cols, lty=ltypes, pch=pch);
 postscript("092006.050706rad52D.1.overlay.ps", width=8, height=8)
 par(mar=c(5,4,4,4)+0.1);
 
 plot( out$s ~ out$t, col="blue", xlab="t(days)",ylab="percentage", ylim=c(0, 1.1), pch=16 );
 title ("rad52DD 050706 #1");                                        ############change here
 arrows( out$t, (out$s - out$e.s), out$t, (out$s + out$e.s), length=0.1, angle=90,code=3, lty=1, col="blue" );
 t = seq(0, max(out$t),by=0.1);
 fit.s = logistical.viability ( fm.s$coefficients[1], fm.s$coefficients[2], t );
 lines( fit.s ~ t, col="blue",lty=2);
 
 points( out$Pb ~ out$t, pch=15 );
 arrows( out$t, (out$Pb - out$e.b), out$t, (out$Pb + out$e.b), length=0.1, angle=90,code=3, lty=1 );
 lines( fit.b ~ t, lty=2);
 ##calculate Rb = d(Pb)/dt
 # derivative.black <- function(b.max, b.min, T, w, t) {  (b.max - b.min) * w * t ^(w -1) / (1 + (t / T ))^2; }
 out$dPb = derivative.black(b.max, b.min,  fm.b$coefficients[1], fm.b$coefficients[2], out$t );  #first point is Inf
 out$g.e = genome.integrity(b.max, b.min,  fm.b$coefficients[1], fm.b$coefficients[2], out$t );
 out$Rb     = out$dPb / out$g.e;                        ### rate of becoming blacks
 out$R0.5   = out$R0.5.raw / out$g.e;                   #### 090706 change
 ## lines ( out$Rb ~ out$t, col="brown", lty=2) 
 #lines ( out$R0.5 ~ out$t, col="green", lty=2); 
 #points ( out$R0.5 ~ out$t, col="green");
 out$e.b05  =  ifelse( out$e.b05==0, out$R0.5 * (out$e.b/out$Pb), out$e.b05    );
 # out$e.dPb =  out$dPb * (out$e.b / out$Pb)  ## I use out$e.b as proxy  
 
 out$L   = out$R0.5 / out$Rb   #This is equivalent to out$R0.5.raw / out$dPb
 out$L[1] = NA;
 out$e.L = out$L * sqrt( (out$e.b05 / out$R0.5)^2 + (out$e.b / out$Pb)^2 )
 ylim = c(0, max(out$L[2:length(out$L)])*1.7 )
 par(new=T);
 plot( out$L ~ out$t, col="red", axes=F, xlab="", ylab="", ylim=ylim, pch=16 ); 
 arrows( out$t, (out$L - out$e.L), out$t, (out$L + out$e.L), length=0.1, angle=90,code=3, lty=1, col="red" );
 axis(4, at=pretty(ylim) )
 mtext( "ratio", 4, 2);
 L = out$L[2:length(out$L)]; t=out$t[2:length(out$L)];
 L = c( 0, L);  t = c(0, t);
 fm.L = gnls( L ~ A * exp(B*t) + C, start=list( A=0.005, B=0.5, C=0.005) );
 t = seq(0, max(out$t),by=0.1);
 fit.L = fm.L$coefficients[1] * exp( fm.L$coefficients[2] * t) + fm.L$coefficients[3]
 lines( fit.L ~ t, col="red", lty=2);
 #add labels here
 cols  =c("blue","black","red");
 labels=c("viability","Pr(b)","half/full")
 ltypes=c(2,2,2) 
 pch   =c( 16, 15,16)
 legend( 5 , 10 ,labels, col=cols, lty=ltypes, pch=pch);
 dev.off();
library(nlme)
files = c( "050706.rad52D.1.tab","050706.rad52D.2.tab" ); 
strains = files; #for convenience
######## functions
logistical.viability <- function( T, w, t ) { ret <- 1 /( 1 + ( t / T )^ w );  }
logistical.mortality <- function( T, w, t ) {  ( w * t^(w-1) ) / (( 1 + (t/T)^w ) * T^w ); }
logistical.black     <- function(b.max, b.min, T, w, t ) { ret <- b.max - (b.max - b.min) /( 1 + ( t / T )^ w );  }
derivative.black <- function(b.max, b.min, T, w, t) {(b.max - b.min) * w * (t^(w -1)) / ((1 + (t / T )^w)^2 * T^w );}
genome.integrity <- function(b.max, b.min, T, w, t) {  2 * (b.max - b.min) / (1 + (t/T)^w) + (1 - 2 * b.max); }
############ end of functions
  # "101S""M1-2" M13 M14" M2-8-1" "M2-8-2" "M32"    "M34" "M5"  "M8" "YPS128" "YPS163"
ww = c(12,17,17,       5,   10,    10,       6,      10,   20,  10,     5,   5)
TT = c(4,  7,   10,   7,    6,        4,       6,     5,   5,   10,     4,   4);
parameters = c("strain", "Tc","wc", "Tmmax","Tg", "wg", "Tbmax","Td", "wd", "Tdmax","b.min", "b.max", "b0", "half.0.raw");
out2 = data.frame( matrix( nrow= length(strains), ncol=length(parameters) ) );
names(out2) = parameters;
out2$strain[ss] =  strains[ss]; 
 tb = read.table(files[ss], header=T, sep="\t");
 tb[ is.na(tb$white), ] = NA;
 tb = tb[ ! is.na(tb$t),  ]
 tb$t = tb$t / 24;
files[1]
 tb = read.table(files[ss], header=T, sep="\t");
ss=1
 tb = read.table(files[ss], header=T, sep="\t");
tb
der=T, sep="\t");
Error in read.table(files[ss], hea
 out2$strain[ss] =  strains[ss]; 
 tb = read.table(files[ss], header=T, sep="\t");
 tb[ is.na(tb$white), ] = NA;
 tb = tb[ ! is.na(tb$t),  ]
 tb$t = tb$t / 24;
 labels = names(tb);
 tmp.indice = seq( 1 : length(labels) );
 names( tmp.indice ) = labels;
 for( i in 1:length(tb[,1])) { #row
   for( j in tmp.indice["white"] : length(labels) ) {
      if (is.na( tb[i,j])) { tb[i,j] = 0; }
   }
 }
 #normalization
 tb2 = tb;  
 for( j in tmp.indice["white"] : length(labels) ) {
   tb2[,j] = tb2[,j] * tb2$D1 * tb2$D2;
 }
 tb.sub = tb2 #for minimal coding 
 #generate row indice for averaging
 row.steps = as.vector( table( tb.sub$t ) ); # a new trick, ha
 #generate tb.m
 n.row = length( row.steps );
 col.labels = c("t", "white", "black", "B0.5","B0.25", "B0.125","B0.0625","B2", "Btiny","total" );
 tb.m = data.frame( matrix( nrow=n.row, ncol= length(col.labels) ) )  # mean values
 names( tb.m ) = col.labels; 
 
 upper.row = 0; #up pointer
 lower.row = 0; #low pointer 
 for( i in 1:n.row ) {
   upper.row = lower.row + 1;
   lower.row = upper.row + row.steps[ i ] - 1 ;
   tb.m[i,1]  = tb.sub$t[ upper.row ]
   for( j in 2: ( length(col.labels) - 1 ) ) {
     tb.m[i, j] = mean( tb.sub[ upper.row : lower.row, j+3] )
   }
   tb.m$total[i] = sum( tb.m[i, 2:( length(col.labels) - 1 )], na.rm=T );
 }
 header = c("t","Pb","s", "g","m","Rb","R0.5", "L"  );   ### L = rate(1/2) / rate(black) 
 out = data.frame( matrix( nrow= length(tb.m[,1]) , ncol= length(header) ) );
 names( out ) = header;
 out$t = tb.m$t; # "t"
out
 #######calculate s , g
 out$s      = tb.m$total / tb.m$total[1]
 out$Pb     = tb.m$black / tb.m$total;
 out$g      = 1 - 2 * out$Pb;
  # out$e.s    =  out$s * (tb.m$sd.w / tb.m$white);
  # out$e.b    =  out$Pb * (tb.m$sd.b / tb.m$black);
 out$R0.5.raw   = tb.m$B0.5 /tb.m$total; #needs to be adjusted by g.e
  # out$e.b05  =  out$R0.5.raw * ( tb.m$sd.b05 / tb.m$B0.5)
 ### plot of the raw data 
 plot( out$s ~ out$t , type='l', main= paste(current_strain), col="blue", log='y');
 lines( out$Pb ~ out$t, col="black");
 labels = c("viability","black");
 ltypes = c(1,1);
 legend( (max(out$t)*0.7 ), 0.8, labels, col=c("blue", "black"), lty = ltypes);
 ### estimate half life
 t1 = max( out$t[out$s>0.5] )
 t2 = min( out$t[out$s<0.5] )
 t.start = (t1+t2)/2 
 ######## calclulate T0.5 w_s
 t= out$t
 s= out$s
 fs2 = function(t,v) {  1/( 1 + ( t / v )^ ww[ss] ) }
 #if ( strains[ss] == "M13") { s[c(2,3,4)] = 1 }
 if (( strains[ss] == "M14") | (strains[ss]=="M13" ) | (strains[ss]=="M2-8-1" )) {
  fm.s <- gnls( s ~ fs2(t,v) , start = list( v = t.start)  );
  out2[ss, c("Tc", "wc")] = c( fm.s$coefficients[c("v")], ww[ss] );
 } else {
  fm.s <- gnls( s ~ 1 /( 1 + ( t / v )^ w ) , start = list( v = t.start, w = ww[ss] )  );
  fm.s # this the half life T1/2 w_s
  out2[ss, c("Tc", "wc")] = fm.s$coefficients[c("v","w")]
 }
 tt = seq(0, 2*max(out$t),by=0.05);
 fit.m = logistical.mortality ( out2$Tc[ss], out2$wc[ss], tt );
 out2$Tmmax[ss] = tt[fit.m == max(fit.m)]
### plot of the raw data 
 plot( out$s ~ out$t , type='l', main= paste(strains[ss]), col="blue", log='y');
 lines( out$Pb ~ out$t, col="black");
 labels = c("viability","black");
 ltypes = c(1,1);
 legend( (max(out$t)*0.7 ), 0.8, labels, col=c("blue", "black"), lty = ltypes);
 ### estimate half life
 t1 = max( out$t[out$s>0.5] )
 t2 = min( out$t[out$s<0.5] )
 t.start = (t1+t2)/2 
fm.s
 out$Pb = ifelse( out$Pb==0 & out$t > t2, NA, out$Pb);   #remove outliers of Pb in late stage
 if ( strains[ss] == "101S")  {  out$Pb[c(4)] = NA;   }
 if (strains[ss] =="M2-8-2") { out$Pb[c(5)] = 0.2; }
 #estimate starting values
 b.tmp = sort( out$Pb[ out$Pb>0 ] );
 b.min = b.tmp[1]/2 + b.tmp[2]/2;
 b.tmp = rev(b.tmp); 
 b.max = b.tmp[ 2 ] /2 + b.tmp[ 2] /2
 # b.min = b.tmp[1]/2 + b.tmp[2]/2;
 #  b.max = b.tmp[ length(b.tmp) ] /2 + b.tmp[ length(b.tmp) -1 ] /2
 b = out$Pb[ ! is.na(out$Pb) ]
 t = out$t[  ! is.na(out$Pb) ]  ;
 fb = function( t, T.g, w ) { b.max - (b.max - b.min) / (1 + (t/T.g)^w) }
 fb2 = function( t, T.g)  { b.max - (b.max - b.min) / (1 + (t/T.g) ^ww[ss] ); }
 #####   Pr[B>=b] = b.max - (b.max - b.min) /( 1 + ( t / T )^ w ) ########formula for cumulative Pr(b)
 #fm.b = gnls( b ~ b.max2 - (b.max2 - b.min2) / (1 + (t/T.g)^w ), start=list( T.g= t2, w=10) );
 if( ( strains[ss]=="M13")|(strains[ss]=="M2-8-2") |(strains[ss]=="M8") ) {
  fm.b = gnls( b ~ fb2( t, T.g), start=list( T.g= t2) );
  fm.b
  out2[ss, c("Tg", "wg")] = c( fm.b$coefficients[c("T.g")], ww[ss]);
 } else {
  fm.b = gnls( b ~ fb( t, T.g, w), start=list( T.g= t2, w= ww[ss]) );
  fm.b
  out2[ss, c("Tg", "wg")] = fm.b$coefficients[c("T.g","w")]
 }
 out2[ss, c("b.min", "b.max", "b0", "half.0.raw")] = c(b.tmp[1], b.tmp[length(b.tmp)], out$Pb[1], out$R0.5.raw[1]  );
 fit.dPb = derivative.black(b.max, b.min, out2$Tg[ss], out2$wg[ss], tt );  #first point is Inf
 fit.g   = genome.integrity(b.max, b.min, out2$Tg[ss], out2$wg[ss], tt );
 fit.Rb  = fit.dPb / fit.g;     
 out2$Tbmax[ss] = tt[fit.Rb == max(fit.Rb)]
plot(b~t)
b.max
b.min
 ######## calclulate T0.5 w_s
 t= out$t
 s= out$s
 fs2 = function(t,v) {  1/( 1 + ( t / v )^ ww[ss] ) }
 #if ( strains[ss] == "M13") { s[c(2,3,4)] = 1 }
#  fm.s <- gnls( s ~ fs2(t,v) , start = list( v = t.start)  );
#  out2[ss, c("Tc", "wc")] = c( fm.s$coefficients[c("v")], ww[ss] );
  fm.s <- gnls( s ~ 1 /( 1 + ( t / v )^ w ) , start = list( v = t.start, w = ww[ss] )  );
  fm.s # this the half life T1/2 w_s
  out2[ss, c("Tc", "wc")] = fm.s$coefficients[c("v","w")]
 tt = seq(0, 2*max(out$t),by=0.05);
 fit.m = logistical.mortality ( out2$Tc[ss], out2$wc[ss], tt );
 out2$Tmmax[ss] = tt[fit.m == max(fit.m)]
out2
######## calclulate T_g and w_g using Pb
 # Pb = b.max - (b.max-b.min) / (1 + (t/T.g)^w)
 out$Pb = ifelse( out$Pb==0 & out$t > t2, NA, out$Pb);   #remove outliers of Pb in late stage
 if ( strains[ss] == "101S")  {  out$Pb[c(4)] = NA;   }
 if (strains[ss] =="M2-8-2") { out$Pb[c(5)] = 0.2; }
 #estimate starting values
 b.tmp = sort( out$Pb[ out$Pb>0 ] );
 b.min = b.tmp[1]/2 + b.tmp[2]/2;
 b.tmp = rev(b.tmp); 
 b.max = b.tmp[ 2 ] /2 + b.tmp[ 2] /2
 # b.min = b.tmp[1]/2 + b.tmp[2]/2;
 #  b.max = b.tmp[ length(b.tmp) ] /2 + b.tmp[ length(b.tmp) -1 ] /2
 b = out$Pb[ ! is.na(out$Pb) ]
 t = out$t[  ! is.na(out$Pb) ]  ;
 fb = function( t, T.g, w ) { b.max - (b.max - b.min) / (1 + (t/T.g)^w) }
 fb2 = function( t, T.g)  { b.max - (b.max - b.min) / (1 + (t/T.g) ^ww[ss] ); }
 #####   Pr[B>=b] = b.max - (b.max - b.min) /( 1 + ( t / T )^ w ) ########formula for cumulative Pr(b)
 #fm.b = gnls( b ~ b.max2 - (b.max2 - b.min2) / (1 + (t/T.g)^w ), start=list( T.g= t2, w=10) );
 if( ( strains[ss]=="M13")|(strains[ss]=="M2-8-2") |(strains[ss]=="M8") ) {
  fm.b = gnls( b ~ fb2( t, T.g), start=list( T.g= t2) );
  fm.b
  out2[ss, c("Tg", "wg")] = c( fm.b$coefficients[c("T.g")], ww[ss]);
 } else {
  fm.b = gnls( b ~ fb( t, T.g, w), start=list( T.g= t2, w= ww[ss]) );
  fm.b
  out2[ss, c("Tg", "wg")] = fm.b$coefficients[c("T.g","w")]
 }
 out2[ss, c("b.min", "b.max", "b0", "half.0.raw")] = c(b.tmp[1], b.tmp[length(b.tmp)], out$Pb[1], out$R0.5.raw[1]  );
 fit.dPb = derivative.black(b.max, b.min, out2$Tg[ss], out2$wg[ss], tt );  #first point is Inf
 fit.g   = genome.integrity(b.max, b.min, out2$Tg[ss], out2$wg[ss], tt );
 fit.Rb  = fit.dPb / fit.g;     
 out2$Tbmax[ss] = tt[fit.Rb == max(fit.Rb)]
 
  fm.b = gnls( b ~ fb2( t, T.g), start=list( T.g= t2) );
  fm.b
  out2[ss, c("Tg", "wg")] = c( fm.b$coefficients[c("T.g")], ww[ss]);
ouy3
out2
20.01215
  fm.b = gnls( b ~ fb( t, T.g, w), start=list( T.g= t2, w= ww[ss]) );
  fm.b
rm(list=ls());
library(nlme)
files = c( "050706.rad52D.1.tab","050706.rad52D.2.tab" ); 
strains = files; #for convenience
######## functions
logistical.viability <- function( T, w, t ) { ret <- 1 /( 1 + ( t / T )^ w );  }
logistical.mortality <- function( T, w, t ) {  ( w * t^(w-1) ) / (( 1 + (t/T)^w ) * T^w ); }
logistical.black     <- function(b.max, b.min, T, w, t ) { ret <- b.max - (b.max - b.min) /( 1 + ( t / T )^ w );  }
derivative.black <- function(b.max, b.min, T, w, t) {(b.max - b.min) * w * (t^(w -1)) / ((1 + (t / T )^w)^2 * T^w );}
genome.integrity <- function(b.max, b.min, T, w, t) {  2 * (b.max - b.min) / (1 + (t/T)^w) + (1 - 2 * b.max); }
############ end of functions
ww = c(12,17,17,       5,   10,    10,       6,      10,   20,  10,     5,   5)
TT = c(4,  7,   10,   7,    6,        4,       6,     5,   5,   10,     4,   4);
parameters = c("strain", "Tc","wc", "Tmmax","Tg", "wg", "Tbmax","Td", "wd", "Tdmax","b.min", "b.max", "b0", "half.0.raw");
out2 = data.frame( matrix( nrow= length(strains), ncol=length(parameters) ) );
names(out2) = parameters;
pdf( paste("110206", files, "pdf", sep="."), width=8, height=8 ); 
###################################
for( ss in 1:length(strains) ) {
# ss =1; 
 out2$strain[ss] =  strains[ss]; 
 tb = read.table(files[ss], header=T, sep="\t");
 tb[ is.na(tb$white), ] = NA;
 tb = tb[ ! is.na(tb$t),  ]
 tb$t = tb$t / 24;
 labels = names(tb);
 tmp.indice = seq( 1 : length(labels) );
 names( tmp.indice ) = labels;
 for( i in 1:length(tb[,1])) { #row
   for( j in tmp.indice["white"] : length(labels) ) {
      if (is.na( tb[i,j])) { tb[i,j] = 0; }
   }
 }
 #normalization
 tb2 = tb;  
 for( j in tmp.indice["white"] : length(labels) ) {
   tb2[,j] = tb2[,j] * tb2$D1 * tb2$D2;
 }
 tb.sub = tb2 #for minimal coding 
 #generate row indice for averaging
 row.steps = as.vector( table( tb.sub$t ) ); # a new trick, ha
 #generate tb.m
 n.row = length( row.steps );
 col.labels = c("t", "white", "black", "B0.5","B0.25", "B0.125","B0.0625","B2", "Btiny","total" );
 tb.m = data.frame( matrix( nrow=n.row, ncol= length(col.labels) ) )  # mean values
 names( tb.m ) = col.labels; 
 
 upper.row = 0; #up pointer
 lower.row = 0; #low pointer 
 for( i in 1:n.row ) {
   upper.row = lower.row + 1;
   lower.row = upper.row + row.steps[ i ] - 1 ;
   tb.m[i,1]  = tb.sub$t[ upper.row ]
   for( j in 2: ( length(col.labels) - 1 ) ) {
     tb.m[i, j] = mean( tb.sub[ upper.row : lower.row, j+3] )
   }
   tb.m$total[i] = sum( tb.m[i, 2:( length(col.labels) - 1 )], na.rm=T );
 }
 header = c("t","Pb","s", "g","m","Rb","R0.5", "L"  );   ### L = rate(1/2) / rate(black) 
 out = data.frame( matrix( nrow= length(tb.m[,1]) , ncol= length(header) ) );
 names( out ) = header;
 out$t = tb.m$t; # "t"
 #######calculate s , g
 out$s      = tb.m$total / tb.m$total[1]
 out$Pb     = tb.m$black / tb.m$total;
 out$g      = 1 - 2 * out$Pb;
  # out$e.s    =  out$s * (tb.m$sd.w / tb.m$white);
  # out$e.b    =  out$Pb * (tb.m$sd.b / tb.m$black);
 out$R0.5.raw   = tb.m$B0.5 /tb.m$total; #needs to be adjusted by g.e
  # out$e.b05  =  out$R0.5.raw * ( tb.m$sd.b05 / tb.m$B0.5)
 ### plot of the raw data 
 plot( out$s ~ out$t , type='l', main= paste(strains[ss]), col="blue", log='y');
 lines( out$Pb ~ out$t, col="black");
 labels = c("viability","black");
 ltypes = c(1,1);
 legend( (max(out$t)*0.7 ), 0.8, labels, col=c("blue", "black"), lty = ltypes);
 ### estimate half life
 t1 = max( out$t[out$s>0.5] )
 t2 = min( out$t[out$s<0.5] )
 t.start = (t1+t2)/2 
 ######## calclulate T0.5 w_s
 t= out$t
 s= out$s
 fs2 = function(t,v) {  1/( 1 + ( t / v )^ ww[ss] ) }
 #if ( strains[ss] == "M13") { s[c(2,3,4)] = 1 }
#  fm.s <- gnls( s ~ fs2(t,v) , start = list( v = t.start)  );
#  out2[ss, c("Tc", "wc")] = c( fm.s$coefficients[c("v")], ww[ss] );
  fm.s <- gnls( s ~ 1 /( 1 + ( t / v )^ w ) , start = list( v = t.start, w = ww[ss] )  );
  fm.s # this the half life T1/2 w_s
  out2[ss, c("Tc", "wc")] = fm.s$coefficients[c("v","w")]
 tt = seq(0, 2*max(out$t),by=0.05);
 fit.m = logistical.mortality ( out2$Tc[ss], out2$wc[ss], tt );
 out2$Tmmax[ss] = tt[fit.m
######## calclulate T_g and w_g using Pb
 # Pb = b.max - (b.max-b.min) / (1 + (t/T.g)^w)
 out$Pb = ifelse( out$Pb==0 & out$t > t2, NA, out$Pb);   #remove outliers of Pb in late stage
 if ( strains[ss] == "101S")  {  out$Pb[c(4)] = NA;   }
 if (strains[ss] =="M2-8-2") { out$Pb[c(5)] = 0.2; }
 #estimate starting values
 b.tmp = sort( out$Pb[ out$Pb>0 ] );
 b.min = b.tmp[1]/2 + b.tmp[2]/2;
 b.tmp = rev(b.tmp); 
 b.max = b.tmp[ 2 ] /2 + b.tmp[ 2] /2
 # b.min = b.tmp[1]/2 + b.tmp[2]/2;
 #  b.max = b.tmp[ length(b.tmp) ] /2 + b.tmp[ length(b.tmp) -1 ] /2
 b = out$Pb[ ! is.na(out$Pb) ]
 t = out$t[  ! is.na(out$Pb) ]  ;
 fb = function( t, T.g, w ) { b.max - (b.max - b.min) / (1 + (t/T.g)^w) }
 fb2 = function( t, T.g)  { b.max - (b.max - b.min) / (1 + (t/T.g) ^ww[ss] ); }
 #####   Pr[B>=b] = b.max - (b.max - b.min) /( 1 + ( t / T )^ w ) ########formula for cumulative Pr(b)
 #fm.b = gnls( b ~ b.max2 - (b.max2 - b.min2) / (1 + (t/T.g)^w ), start=list( T.g= t2, w=10) );
 
  fm.b = gnls( b ~ fb2( t, T.g), start=list( T.g= t2) );
  fm.b
  out2[ss, c("Tg", "wg")] = c( fm.b$coefficients[c("T.g")], ww[ss]);
  #fm.b = gnls( b ~ fb( t, T.g, w), start=list( T.g= t2, w= ww[ss]) );
  #fm.b
  #out2[ss, c("Tg", "wg")] = fm.b$coefficients[c("T.g","w")]
 
 out2[ss, c("b.min", "b.max", "b0", "half.0.raw")] = c(b.tmp[1], b.tmp[length(b.tmp)], out$Pb[1], out$R0.5.raw[1]  );
 fit.dPb = derivative.black(b.max, b.min, out2$Tg[ss], out2$wg[ss], tt );  #first point
 fit.g   = genome.integrity(b.max, b.min, out2$Tg[ss], out2$wg[ss], tt );
 fit.Rb  = fit.dPb / fit.g;     
 out2$Tbmax[ss] = tt[fit.Rb == max(fit.Rb)]
 write.table(out2, "estimations.meng053006.110206.csv", row.names=F, quote=F, sep="\t");
}#end of ss loop
 write.table(out2, "estimations.meng053006.110206.csv", row.names=F, quote=F, sep="\t")
 dev.off();
rm(list=ls());
library(nlme)
files = c( "050706.rad52D.1.tab","050706.rad52D.2.tab" ); 
strains = files; #for convenience
######## functions
logistical.viability <- function( T, w, t ) { ret <- 1 /( 1 + ( t / T )^ w );  }
logistical.mortality <- function( T, w, t ) {  ( w * t^(w-1) ) / (( 1 + (t/T)^w ) * T^w ); }
logistical.black     <- function(b.max, b.min, T, w, t ) { ret <- b.max - (b.max - b.min) /( 1 + ( t / T )^ w );  }
derivative.black <- function(b.max, b.min, T, w, t) {(b.max - b.min) * w * (t^(w -1)) / ((1 + (t / T )^w)^2 * T^w );}
genome.integrity <- function(b.max, b.min, T, w, t) {  2 * (b.max - b.min) / (1 + (t/T)^w) + (1 - 2 * b.max); }
############ end of functions
ww = c(12,17,17,       5,   10,    10,       6,      10,   20,  10,     5,   5)
TT = c(4,  7,   10,   7,    6,        4,       6,     5,   5,   10,     4,   4);
parameters = c("strain", "Tc","wc", "Tmmax","Tg", "wg", "Tbmax","Td", "wd", "Tdmax","b.min", "b.max", "b0", "half.0.raw");
out2 = data.frame( matrix( nrow= length(strains), ncol=length(parameters) ) );
names(out2) = parameters;
pdf( paste("110206", files, "pdf", sep="."), width=8, height=8 ); 
###################################
for( ss in 1:length(strains) ) {
# ss =1; 
 out2$strain[ss] =  strains[ss]; 
 tb = read.table(files[ss], header=T, sep="\t");
 tb[ is.na(tb$white), ] = NA;
 tb = tb[ ! is.na(tb$t),  ]
 tb$t = tb$t / 24;
 labels = names(tb);
 tmp.indice = seq( 1 : length(labels) );
 names( tmp.indice ) = labels;
 for( i in 1:length(tb[,1])) { #row
   for( j in tmp.indice["white"] : length(labels) ) {
      if (is.na( tb[i,j])) { tb[i,j] = 0; }
   }
 }
 #normalization
 tb2 = tb;  
 for( j in tmp.indice["white"] : length(labels) ) {
   tb2[,j] = tb2[,j] * tb2$D1 * tb2$D2;
 }
 tb.sub = tb2 #for minimal coding 
 #generate row indice for averaging
 row.steps = as.vector( table( tb.sub$t ) ); # a new trick, ha
 #generate tb.m
 n.row = length( row.steps );
 col.labels = c("t", "white", "black", "B0.5","B0.25", "B0.125","B0.0625","B2", "Btiny","total" );
 tb.m = data.frame( matrix( nrow=n.row, ncol= length(col.labels) ) )  # mean values
 names( tb.m ) = col.labels; 
 
 upper.row = 0; #up pointer
 lower.row = 0; #low pointer 
 for( i in 1:n.row ) {
   upper.row = lower.row + 1;
   lower.row = upper.row + row.steps[ i ] - 1 ;
   tb.m[i,1]  = tb.sub$t[ upper.row ]
   for( j in 2: ( length(col.labels) - 1 ) ) {
     tb.m[i, j] = mean( tb.sub[ upper.row : lower.row, j+3] )
   }
   tb.m$total[i] = sum( tb.m[i, 2:( length(col.labels) - 1 )], na.rm=T );
 }
 header = c("t","Pb","s", "g","m","Rb","R0.5", "L"  );   ### L = rate(1/2) / rate(black) 
 out = data.frame( matrix( nrow= length(tb.m[,1]) , ncol= length(header) ) );
 names( out ) = header;
 out$t = tb.m$t; # "t"
 #######calculate s , g
 out$s      = tb.m$total / tb.m$total[1]
 out$Pb     = tb.m$black / tb.m$total;
 out$g      = 1 - 2 * out$Pb;
  # out$e.s    =  out$s * (tb.m$sd.w / tb.m$white);
  # out$e.b    =  out$Pb * (tb.m$sd.b / tb.m$black);
 out$R0.5.raw   = tb.m$B0.5 /tb.m$total; #needs to be adjusted by g.e
  # out$e.b05  =  out$R0.5.raw * ( tb.m$sd.b05 / tb.m$B0.5)
 ### plot of the raw data 
 plot( out$s ~ out$t , type='l', main= paste(strains[ss]), col="blue", log='y');
 lines( out$Pb ~ out$t, col="black");
 labels = c("viability","black");
 ltypes = c(1,1);
 legend( (max(out$t)*0.7 ), 0.8, labels, col=c("blue", "black"), lty = ltypes);
 ### estimate half life
 t1 = max( out$t[out$s>0.5] )
 t2 = min( out$t[out$s<0.5] )
 t.start = (t1+t2)/2 
 ######## calclulate T0.5 w_s
 t= out$t
 s= out$s
 fs2 = function(t,v) {  1/( 1 + ( t / v )^ ww[ss] ) }
 #if ( strains[ss] == "M13") { s[c(2,3,4)] = 1 }
#  fm.s <- gnls( s ~ fs2(t,v) , start = list( v = t.start)  );
#  out2[ss, c("Tc", "wc")] = c( fm.s$coefficients[c("v")], ww[ss] );
  fm.s <- gnls( s ~ 1 /( 1 + ( t / v )^ w ) , start = list( v = t.start, w = ww[ss] )  );
  fm.s # this the half life T1/2 w_s
  out2[ss, c("Tc", "wc")] = fm.s$coefficients[c("v","w")]
 tt = seq(0, 2*max(out$t),by=0.05);
 fit.m = logistical.mortality ( out2$Tc[ss], out2$wc[ss], tt );
 out2$Tmmax[ss] = tt[fit.m == max(fit.m)]
######## calclulate T_g and w_g using Pb
 # Pb = b.max - (b.max-b.min) / (1 + (t/T.g)^w)
 out$Pb = ifelse( out$Pb==0 & out$t > t2, NA, out$Pb);   #remove outliers of Pb in late stage
 if ( strains[ss] == "101S")  {  out$Pb[c(4)] = NA;   }
 if (strains[ss] =="M2-8-2") { out$Pb[c(5)] = 0.2; }
 #estimate starting values
 b.tmp = sort( out$Pb[ out$Pb>0 ] );
 b.min = b.tmp[1]/2 + b.tmp[2]/2;
 b.tmp = rev(b.tmp); 
 b.max = b.tmp[ 2 ] /2 + b.tmp[ 2] /2
 # b.min = b.tmp[1]/2 + b.tmp[2]/2;
 #  b.max = b.tmp[ length(b.tmp) ] /2 + b.tmp[ length(b.tmp) -1 ] /2
 b = out$Pb[ ! is.na(out$Pb) ]
 t = out$t[  ! is.na(out$Pb) ]  ;
 fb = function( t, T.g, w ) { b.max - (b.max - b.min) / (1 + (t/T.g)^w) }
 fb2 = function( t, T.g)  { b.max - (b.max - b.min) / (1 + (t/T.g) ^ww[ss] ); }
 #####   Pr[B>=b] = b.max - (b.max - b.min) /( 1 + ( t / T )^ w ) ########formula for cumulative Pr(b)
 #fm.b = gnls( b ~ b.max2 - (b.max2 - b.min2) / (1 + (t/T.g)^w ), start=list( T.g= t2, w=10) );
 
  fm.b = gnls( b ~ fb2( t, T.g), start=list( T.g= t2) );
  fm.b
  out2[ss, c("Tg", "wg")] = c( fm.b$coefficients[c("T.g")], ww[ss]);
  #fm.b = gnls( b ~ fb( t, T.g, w), start=list( T.g= t2, w= ww[ss]) );
  #fm.b
  #out2[ss, c("Tg", "wg")] = fm.b$coefficients[c("T.g","w")]
 
 out2[ss, c("b.min", "b.max", "b0", "half.0.raw")] = c(b.tmp[1], b.tmp[length(b.tmp)], out$Pb[1], out$R0.5.raw[1]  );
 fit.dPb = derivative.black(b.max, b.min, out2$Tg[ss], out2$wg[ss], tt );  #first point is Inf
 fit.g   = genome.integrity(b.max, b.min, out2$Tg[ss], out2$wg[ss], tt );
 fit.Rb  = fit.dPb / fit.g;     
 out2$Tbmax[ss] = tt[fit.Rb == max(fit.Rb)]
 write.table(out2, "estimations.meng053006.110206.csv", row.names=F, quote=F, sep="\t");
}#end of ss loop
 write.table(out2, "estimations.meng053006.110206.csv", row.names=F, quote=F, sep="\t")
 dev.off();
