help(rnorm);
help(runif);
help(sin)
help(if);
help(apply);
#there are two balls moving on the surface of a large sphere. 
# what are the chance that the two ball overlaps?
rm=(list=ls());
 r1=0.1;
 r2=0.1;
 R=1; #the large sphere, radius
 n=100;
#the angles for point1
a1= runif(n, min=-1, max=-1);
b1= runif(n, min=-1, max=-1);
#the angles for point2
a2= runif(n, min=-1, max=-1);
b2= runif(n, min=-1, max=-1);
delta.a = a1 - a2;
delta.b = b1 - b2;
d = sqrt( sin(delta.a)^2 + sin(delta.b)^2 );
tb = data.frame( d );
names(tb) = c("d");
for ( i in (1:t.max) ) {
  tmp.next = sample( tb[,i], replace=T);
  old = names(tb);
  tb = data.frame( cbind( tb, tmp.next ) )
  names( tb) = c( old, as.character(i) );
}
oracle= function ( d, p ) {
   if (d>p) 
ret = 1
   else
ret =0;
   ret;
 }
out = apply(tb, 2, oracle);
#there are two balls moving on the surface of a large sphere. 
# what are the chance that the two ball overlaps?
rm=(list=ls());
 r1=0.1;
 r2=0.1;
 R=1; #the large sphere, radius
 n=100;
#the angles for point1
a1= runif(n, min=-1, max=-1);
b1= runif(n, min=-1, max=-1);
#the angles for point2
a2= runif(n, min=-1, max=-1);
b2= runif(n, min=-1, max=-1);
delta.a = a1 - a2;
delta.b = b1 - b2;
d = sqrt( sin(delta.a)^2 + sin(delta.b)^2 );
tb = data.frame( d );
names(tb) = c("d");
oracle= function ( d, p ) {
   if (d>p) 
ret = 1
   else
ret =0;
   ret;
 }
out = apply(tb, 2, oracle);
#there are two balls moving on the surface of a large sphere. 
# what are the chance that the two ball overlaps?
rm=(list=ls());
 r1=0.1;
 r2=0.1;
 R=1; #the large sphere, radius
 n=100;
#the angles for point1
a1= runif(n, min=-1, max=-1);
b1= runif(n, min=-1, max=-1);
#the angles for point2
a2= runif(n, min=-1, max=-1);
b2= runif(n, min=-1, max=-1);
delta.a = a1 - a2;
delta.b = b1 - b2;
d = sqrt( sin(delta.a)^2 + sin(delta.b)^2 );
tb = data.frame( d );
names(tb) = c("d");
oracle= function ( d ) {
   if (d>0.1) 
ret = 1
   else
ret =0;
   ret;
 }
out = apply(tb, 2, oracle);
out
a1
#there are two balls moving on the surface of a large sphere. 
# what are the chance that the two ball overlaps?
rm=(list=ls());
 r1=0.1;
 r2=0.1;
 R=1; #the large sphere, radius
 n=100;
#the angles for point1
a1= runif(n, min=-1, max=1);
b1= runif(n, min=-1, max=1);
#the angles for point2
a2= runif(n, min=-1, max=1);
b2= runif(n, min=-1, max=1);
delta.a = a1 - a2;
delta.b = b1 - b2;
d = sqrt( sin(delta.a)^2 + sin(delta.b)^2 );
tb = data.frame( d );
names(tb) = c("d");
oracle= function ( d ) {
   if (d>0.1) 
ret = 1
   else
ret =0;
   ret;
 }
out = apply(tb, 2, oracle);
out
a1
b1
delta.a
tb = data.frame( rbind(delta.a, delta.b) );
tb
tb = data.frame( cbind(delta.a, delta.b) );
tb
tb$d = sqrt( sin(tb$delta.a)^2 + sin(tb$delta.b)^2 );
tb
tb[1,]
oracle= function ( d ) {
   if (d>0.1) 
ret = 1
   else
ret =0;
   ret;
 }
out = apply(tb$d, 2, oracle);
help(apply);
d
tb$d
tb
tb
save.image("C:/Documents and Settings/hong_man/Desktop/D.RData")
help(ifelse)
tb = data.frame( cbind(delta.a, delta.b) );
tb$d = sqrt( sin(tb$delta.a)^2 + sin(tb$delta.b)^2 );
tb$c = ifelse( d>1, 1, 0);
tb
summary(tb);
n=500;
#the angles for point1
a1= runif(n, min=-1, max=1);
b1= runif(n, min=-1, max=1);
#the angles for point2
a2= runif(n, min=-1, max=1);
b2= runif(n, min=-1, max=1);
delta.a = a1 - a2;
delta.b = b1 - b2;
tb = data.frame( cbind(delta.a, delta.b) );
tb$d = sqrt( sin(tb$delta.a)^2 + sin(tb$delta.b)^2 );
tb$c = ifelse( d>1, 1, 0);
mean(tb$c);
tb
7/16
exit
setwd("c:/data/lab/MengLu/Hong_modification");
setwd("c:/data/lab/MengLu/Hong_modifications");
tb = read.table( "0301M34.tab", header=T);
setwd("c:/data/lab/MengLu/Hong_modifications/R");
tb = read.table( "0301M34.tab", header=T);
setwd("C:\data\lab\MengLu\Hong_modifications\LOH-CLS\R");
tb = read.table( "0301M34.tab", header=T);
setwd("C:\data\lab\MengLu\Hong_modifications\LOH-CLS\R");
setwd("C:/data/lab/MengLu/Hong_modifications/LOH-CLS/R");
tb = read.table( "0301M34.tab", header=T);
tb = read.table( "0301M34.tab", header=T);
tb = read.table( "0301M34.tab", header=T, sep="\t");
tb
str(tb);
tb = read.table( "0301M34.tab", header=T, sep="\t");
str(tb);
tb = read.table( "0301M34.tab", header=T, sep="\t");
tb$total = tb$white #initiation;
str(tb);
for( i in 1:12 ) {
 tb[i, 10] = sum( tb[i, 5:13] );
}
tb
str(tb);
tb = read.table( "0301M34.tab", header=T, sep="\t");
tb$total = tb$white #initiation;
for( i in 1:12 ) {
 tb[i, 14] = sum( tb[i, 5:13] );
}
tb
tb
tb = read.table( "0301M34.tab", header=T, sep="\t");
tb$total = tb$white #initiation;
for( i in 1:12 ) {
 tb[i, 14] = sum( tb[i, 5:13] ) * tb[i, 3] * tb[4];
}
warnings
warnings();
tb = read.table( "0301M34.tab", header=T, sep="\t");
tb$total = tb$white #initiation;
for( i in 1:12 ) {
 tb[i, 14] = sum( tb[i, 5:13] ) * tb[i, 3] * tb[i,4];
}
tb
help(smooth);
help(smooth.spline);
tt = smooth(tb$total);
tt
tt = smooth.spline(tb$total);
tt
str(tt);
tt$y
?smooth.spline
tb = read.table( "0301M34.tab", header=T, sep="\t");
tb$total = tb$white #initiation;
for( i in 1:12 ) {
 tb[i, 14] = sum( tb[i, 5:13] ) * tb[i, 3] * tb[i,4];
}
tt = smooth.spline(tb$t, tb$total);
tt
plot( tb$total ~ tb$t);
plot( tb$total ~ tb$t, type='l');
plot( tb$total ~ tb$t, type='l', col="red");
lines( tt ~ tb$t, col="green");
lines( tb$t,tt, col="green");
lines( tb$t,tt$y, col="green");
?smooth.spline
tt = smooth.spline(tb$t, tb$total, w=tb$white );
lines( tb$t,tt$y, col="green");
plot( tb$total ~ tb$t, type='l', col="red");
lines( tb$t,tt$y, col="green");
tt = smooth.spline(tb$t, tb$total );
plot( tb$total ~ tb$t, type='l', col="red");
lines( tb$t,tt$y, col="green");
tb
tt$y
?lowess
tt = smooth.spline(tb$t, tb$total );
tt
str(tt);
tt$y
tb$total
tb = read.table( "0301M34.tab", header=T, sep="\t");
tb$total = tb$white #initiation;
for( i in 1:12 ) {
 tb[i, 14] = log( sum( tb[i, 5:13] ) * tb[i, 3] * tb[i,4] );
}
# tt = smooth.spline(tb$t, tb$total );  #this give negative smotth value at the tail
tt = smooth.spline(tb$t, tb$total );
tb$total
tt$y
setwd("C:/data/lab/MengLu/Hong_modifications/LOH-CLS/R");
tb = read.table( "0301M34.tab", header=T, sep="\t");
tb$logT  = tb$white #initiation;
tb$total = tb$white #initiation;
for( i in 1:12 ) {
 tb[i, 14] = log( sum( tb[i, 5:13] ) * tb[i, 3] * tb[i,4] );
}
tb
plot( tb$logT ~ tb$t );
tt = smooth.spline(tb$t, tb$total );
lines( tt$y ~ tb$5, col="red");
lines( tb$t, tt$y, col="red");
tt = smooth.spline(tb$t, tb$logT );
lines( tb$t, tt$y, col="red");
tt$y
setwd("C:/data/lab/MengLu/Hong_modifications/LOH-CLS/R");
tb = read.table( "0301M34.tab", header=T, sep="\t");
tb$logT  = tb$white #initiation;
tb$total = tb$white #initiation;
for( i in 1:12 ) {
 tb[i, 14] = log( sum( tb[i, 5:13] ) * tb[i, 3] * tb[i,4] );
 tb[i, 15] =      sum( tb[i, 5:13] ) * tb[i, 3] * tb[i,4];
}
# tt = smooth.spline(tb$t, tb$total );  #this give negative smotth value at the tail
s.logT = smooth.spline(tb$t, tb$logT );
s.logT
# tt = smooth.spline(tb$t, tb$total );  #this give negative smotth value at the tail
s.logT = smooth.spline(tb$t, tb$logT );
tb$total.s = s.logT$y
# tt = smooth.spline(tb$t, tb$total );  #this give negative smotth value at the tail
s.logT = smooth.spline(tb$t, tb$logT );
tb$total.s = exp( s.logT$y )
plot( tb$total ~ tb$total.s );
tb
# tt = smooth.spline(tb$t, tb$total );  #this give negative smotth value at the tail
s.logT = smooth.spline(tb$t, tb$logT );
tb$total.s = exp( s.logT$y )
tb$total.s[1] = max( tb$total.s );
tb
tb$m = tb$t;
for( i in 1:11) {
 tb$m[i] = tb$total.s[ i+1] -  tb$total.s[ i ]
}
tb
#mortality rate estimation
tb$m = tb$t;
for( i in 1:11) {
 tb$m[i] = tb$total.s[ i ] -  tb$total.s[ i+1 ]
}
tb$m[12]=tb$[11];
tb$m[12]=tb$m[11];
tb$total.s[1] = max( tb$total.s );
#mortality rate estimation
tb$m = tb$t;
for( i in 1:11) {
 tb$m[i] = tb$total.s[ i ] -  tb$total.s[ i+1 ]
}
tb$m[12]=tb$m[11];
tb
#mortality rate estimation
tb$m = tb$t;
for( i in 1:11) {
 tb$m[i] = tb$total.s[ i ] -  tb$total.s[ i+1 ] / (tb.total.s[i]/2 + tb$total.s[i+1]/2)
}
tb$m[12]=tb$m[11];
tb$total.s[1] = max( tb$total.s );
#mortality rate estimation
tb$m = tb$t;
for( i in 1:11) {
 tb$m[i] = tb$total.s[ i ] -  tb$total.s[ i+1 ] / (tb$total.s[i]/2 + tb$total.s[i+1]/2)
}
tb$m[12]=tb$m[11];
tb
#mortality rate estimation
tb$m = tb$t;
for( i in 1:11) {
 tb$m[i] = tb$total.s[ i ] -  tb$total.s[ i+1 ] / (tb$total.s[i]/2 + tb$total.s[i+1]/2)
}
tb$m[12]=tb$m[11];
#mortality rate estimation
tb$m = tb$t;
for( i in 1:11) {
 tb$m[i] = ( tb$total.s[ i ] -  tb$total.s[ i+1 ] ) / (tb$total.s[i]/2 + tb$total.s[i+1]/2)
}
tb$m[12]=tb$m[11];
tb
plot( tb$m ~ tb$t);
plot( tb$m ~ tb$t, type='l');
str(tb);
plot( tb$m ~ tb$t, xlab="hours", ylab="mortality rate", main="M34 30C water, 3/1/05"); 
#whoa, m goes up and then down. not gompertz at all. 
#mortality rate estimation
tb$m = tb$t;
for( i in 1:11) {
 tb$m[i] = ( tb$total.s[ i ] -  tb$total.s[ i+1 ] ) / (tb$total.s[i]/2 + tb$total.s[i+1]/2)
}
tb$m[12]=NA;
plot( tb$m ~ tb$t, xlab="hours", ylab="mortality rate", main="M34 30C water, 3/1/05"); 
#whoa, m goes up and then down. not gompertz at all. 
